name: CI Quality Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      DATABASE_URL:             ${{ secrets.DATABASE_URL }}
      JWT_SECRET:               ${{ secrets.JWT_SECRET }}
      JWT_ALGORITHM:            ${{ secrets.JWT_ALGORITHM }}
      ACCESS_TOKEN_EXPIRATION:  ${{ secrets.ACCESS_TOKEN_EXPIRATION }}
      REFRESH_TOKEN_EXPIRATION: ${{ secrets.REFRESH_TOKEN_EXPIRATION }}
      GUTINDEX_BASE_URL:        ${{ secrets.GUTINDEX_BASE_URL }}
      USE_FAKE_DATA:            ${{ secrets.USE_FAKE_DATA }}
      API_BASE_URL:             ${{ secrets.API_BASE_URL }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend Docker image
        run: |
          docker build \
            --file backend/Dockerfile \
            --tag booktrack-backend:ci \
            backend/

      - name: Run backend container
        id: run-backend
        run: |
          docker run -d --rm \
            --name backend-ci \
            -p 8000:8000 \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e JWT_ALGORITHM="${{ secrets.JWT_ALGORITHM }}" \
            -e ACCESS_TOKEN_EXPIRATION="${{ secrets.ACCESS_TOKEN_EXPIRATION }}" \
            -e REFRESH_TOKEN_EXPIRATION="${{ secrets.REFRESH_TOKEN_EXPIRATION }}" \
            -e GUTINDEX_BASE_URL="${{ secrets.GUTINDEX_BASE_URL }}" \
            -e USE_FAKE_DATA="${{ secrets.USE_FAKE_DATA }}" \
            -e API_BASE_URL="${{ secrets.API_BASE_URL }}" \
            booktrack-backend:ci

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for http://localhost:8000/docs…"
          for i in {1..30}; do
            if curl --silent --fail http://localhost:8000/docs; then
              echo "✓ Backend is up"
              exit 0
            fi
            sleep 2
          done
          echo "::error ::Backend did not become ready in time"
          exit 1

      - name: Run frontend Docker image
        run: |
          docker build \
            --file frontend/Dockerfile \
            --tag booktrack-frontend:ci \
            frontend/
      
      - name: Run frontend container
        id: run-frontend
        run: |
          docker run -d --rm \
            --name frontend-ci \
            -p 8501:8501 \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e JWT_ALGORITHM="${{ secrets.JWT_ALGORITHM }}" \
            -e ACCESS_TOKEN_EXPIRATION="${{ secrets.ACCESS_TOKEN_EXPIRATION }}" \
            -e REFRESH_TOKEN_EXPIRATION="${{ secrets.REFRESH_TOKEN_EXPIRATION }}" \
            -e GUTINDEX_BASE_URL="${{ secrets.GUTINDEX_BASE_URL }}" \
            -e USE_FAKE_DATA="${{ secrets.USE_FAKE_DATA }}" \
            -e API_BASE_URL="${{ secrets.API_BASE_URL }}" \
            booktrack-frontend:ci

      - name: Run quality checks
        run: |
          chmod +x run_test_workflow.sh
          ./run_test_workflow.sh