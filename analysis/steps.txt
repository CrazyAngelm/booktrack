docker compose up --build

 => => transferring dockerfile: 668B                                                                                              0.0s 
 => ERROR [backend internal] load metadata for docker.io/library/python:3.11-slim-bullseye                                       12.6s 
------
 > [backend internal] load metadata for docker.io/library/python:3.11-slim-bullseye:
------
failed to solve: python:3.11-slim-bullseye: failed to resolve source metadata for docker.io/library/python:3.11-slim-bullseye: failed to authorize: failed to fetch anonymous token: Get "https://auth.docker.io/token?scope=repository%3Alibrary%2Fpython%3Apull&service=registry.docker.io": dial tcp: lookup auth.docker.io: no such host

Шаг запуска Docker-композа произошёл сбой сети при попытке достать образ python:3.11-slim-bullseye. Это техническая проблема окружения.

------------------------
docker compose up --build

При попытке docker compose up проект не запустился из-за синтаксических ошибок в shell-скриптах и некорректной настройki upstream у Nginx.

Attaching to backend-1, frontend-1, nginx-1
backend-1   | run_backend.sh: 13: Syntax error: end of file unexpected (expecting "then")
frontend-1  | run_frontend.sh: 7: Syntax error: end of file unexpected (expecting "then")
nginx-1     | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
nginx-1     | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
nginx-1     | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
nginx-1     | 10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
nginx-1     | 10-listen-on-ipv6-by-default.sh: info: /etc/nginx/conf.d/default.conf differs from the packaged version
nginx-1     | /docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh
nginx-1     | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
nginx-1     | /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
nginx-1     | /docker-entrypoint.sh: Configuration complete; ready for start up
backend-1 exited with code 2
frontend-1 exited with code 2
nginx-1     | 2025/05/14 13:12:25 [emerg] 1#1: host not found in upstream "backend:8000" in /etc/nginx/conf.d/default.conf:2
nginx-1     | nginx: [emerg] host not found in upstream "backend:8000" in /etc/nginx/conf.d/default.conf:2
nginx-1 exited with code 1

-------------------

docker так и не удалось запустить


-------------------

пришлось вручную запускать проект, для этого создай venv
python -m venv .venv
.\.venv\Scripts\Activate

-------------------

запуск backend вручную

cd backend
pip install poetry
poetry install

-----------------

ошибка при poetry install

Installing the current project: booktrack-backend (0.1.0)
Error: The current project could not be installed: Readme path `E:\Projects\SQRs\booktrack\backend\README.md` does not exist.
If you do not want to install the current project use --no-root.
If you want to use Poetry only for dependency management but not for packaging, you can disable package mode by setting package-mode = 
false in your pyproject.toml file.
If you did intend to install the current project, you may need to set `packages` in your pyproject.toml file.

-----------------

пришлось использовать
poetry install --no-root

Installing dependencies from lock file
No dependencies to install or update

------------------

далее запустил вручную
uvicorn main:app --host localhost --port 8000

(.venv) PS E:\Projects\SQRs\booktrack\backend> uvicorn main:app --host 0.0.0.0 --port 8000    
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "E:\Projects\SQRs\booktrack\.venv\scripts\uvicorn.exe\__main__.py", line 7, in <module>   
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\click\core.py", line 1161, in __call__
    return self.main(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\click\core.py", line 1082, in main    
    rv = self.invoke(ctx)
         ^^^^^^^^^^^^^^^^
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\click\core.py", line 1443, in invoke
    return ctx.invoke(self.callback, **ctx.params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\click\core.py", line 788, in invoke
    return __callback(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\uvicorn\main.py", line 413, in main
    run(
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\uvicorn\main.py", line 580, in run
    server.run()
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\uvicorn\server.py", line 66, in run
    return asyncio.run(self.serve(sockets=sockets))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\user\AppData\Local\Programs\Python\Python311\Lib\asyncio\runners.py", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File "C:\Users\user\AppData\Local\Programs\Python\Python311\Lib\asyncio\runners.py", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\user\AppData\Local\Programs\Python\Python311\Lib\asyncio\base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\uvicorn\server.py", line 70, in serve
    await self._serve(sockets)
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\uvicorn\server.py", line 77, in _serve
    config.load()
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\uvicorn\config.py", line 435, in load
    self.loaded_app = import_from_string(self.app)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Projects\SQRs\booktrack\.venv\Lib\site-packages\uvicorn\importer.py", line 19, in import_from_string
    module = importlib.import_module(module_str)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\user\AppData\Local\Programs\Python\Python311\Lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen importlib._bootstrap>", line 1204, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1176, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1147, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 690, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 940, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "E:\Projects\SQRs\booktrack\backend\main.py", line 4, in <module>
    from routers import users_router, catalog_router, favourites_router, reading_list_router
  File "E:\Projects\SQRs\booktrack\backend\routers\__init__.py", line 1, in <module>
    from .users import users_router
  File "E:\Projects\SQRs\booktrack\backend\routers\users.py", line 10, in <module>
    from services import UsersService
  File "E:\Projects\SQRs\booktrack\backend\services\__init__.py", line 3, in <module>
    from .favourites import FavouritesService
  File "E:\Projects\SQRs\booktrack\backend\services\favourites.py", line 3, in <module>
    from core.favourites import Favourite
  File "E:\Projects\SQRs\booktrack\backend\core\favourites\__init__.py", line 1, in <module>
    from .crud import *
  File "E:\Projects\SQRs\booktrack\backend\core\favourites\crud.py", line 4, in <module>
    from core.logging import audit_logger
  File "E:\Projects\SQRs\booktrack\backend\core\logging.py", line 4, in <module>
    handler = TimedRotatingFileHandler(
              ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\user\AppData\Local\Programs\Python\Python311\Lib\logging\handlers.py", line 214, in __init__
    BaseRotatingHandler.__init__(self, filename, 'a', encoding=encoding,
  File "C:\Users\user\AppData\Local\Programs\Python\Python311\Lib\logging\handlers.py", line 58, in __init__
    logging.FileHandler.__init__(self, filename, mode=mode,
  File "C:\Users\user\AppData\Local\Programs\Python\Python311\Lib\logging\__init__.py", line 1181, in __init__
    StreamHandler.__init__(self, self._open())
                                 ^^^^^^^^^^^^
  File "C:\Users\user\AppData\Local\Programs\Python\Python311\Lib\logging\__init__.py", line 1213, in _open
    return open_func(self.baseFilename, self.mode,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'E:\\Projects\\SQRs\\booktrack\\backend\\logs\\audit.log'

--------------------

# создаём папку для логов
New-Item -ItemType Directory -Name logs

# создаём пустой файл audit.log (чтобы FileHandler смог его открыть)
New-Item -ItemType File -Path logs\audit.log

и после этого 
http://localhost:8000/docs
заработал!

--------------------

запуск frontend вручную

cd frontend 
poetry install
опять ошибка Error: The current project could not be installed: Readme path `E:\Projects\SQRs\booktrack\frontend\README.md` does not exist.


poetry install --no-root
Installing dependencies from lock file
No dependencies to install or update

streamlit run app.py --server.port 8501 --server.address localhost

http://localhost:8501

запускается.

---------------------

Пробуем регистрироваться
Возникает ошибка
Скриншоты
(RegisterError.png)
(RegisterError2.png)

---------------------
Сбор метрик Maintainability

Покрытие тестами:

cd backend
  pytest --cov=. --cov-report=html

внутри папки htmlcov/.

тесты покрыты:
statements 1471
missing 430
excluded 0
coverage  71%

скриншот
(CoverageTests.PNG)

Mutation-тестирование:
mutmut run
mutmut html

Что получилось: запустить mutmut в Windows не удалось – при запуске mutmut run падает ошибка
ModuleNotFoundError: No module named 'resource'
(модуль resource отсутствует в Windows) → метрика Mutation Score не измерена.
Сравнение с требованием: требуется ≥ 70 % → не достигнуто.
Рекомендация:
Запускать mutation-тестирование в Linux-среде (WSL или Docker), где доступен модуль resource.
Либо использовать альтернативный инструмент (например, Cosmic-Ray) с поддержкой Windows.


Maintainability Index (Radon):
radon.txt файл с содержимым
Общая картина

Среднее значение MI по всем 38 файлам ≈ 84.1 (годится, т.к. порог MI ≥ 70 в целом соблюдён).

Вместе с тем 14 файлов (≈ 37 %) имеют MI ниже требуемых 70 баллов.

Файлы с MI < 70

core/catalog/crud.py        — 68.06
core/catalog/schemas.py     — 55.86
core/favourites/crud.py     — 56.64
core/reading_list/crud.py   — 52.80
core/users/crud.py          — 56.30
core/users/schemas.py       — 58.10
services/catalog.py         — 65.91
util/auth.py                — 66.83
util/token.py               — 56.89
util/users.py               — 55.40
routers/catalog.py          — 59.79
routers/favourites.py       — 66.68
routers/reading_list.py     — 61.29
routers/users.py            — 57.92
dependencies/dependencies.py— 68.15
Причины низкого MI

Большие функции и длинные модули: практически все «crud»- и «router»-модули содержат монолитные блоки кода с высокой цикломатической сложностью.

Отсутствие/незначительное документирование: не все функции снабжены doc-string’ами, что ухудшает показатель «легкости сопровождения».

Дублирование логики: часть валидации и маппинга запросов повторяется в нескольких местах.

Рекомендации по улучшению

Разбить крупные функции на несколько специализированных: вынести бизнес-логику в сервисный слой, оставить в «crud»-модулях только операции БД.

Добавить doc-string’и и типы возвращаемых значений — это сразу повысит MI.

Сократить дублирование: обобщить повторяемые проверки/преобразования в утилитарные функции или base-класс.

После правок перезапустить radon mi, чтобы добиться MI ≥ 70 во всех файлах.



Линтинг:
Ruff

Отчёт ruff.txt показывает “All checks passed!”, то есть по конфигурации Ruff ошибок не выявлено.

Видимо, в pyproject.toml или в .ruff.toml отключены все правила, которые активны в Flake8 (F401, F403, E501, W291, W293 и т. д.).

Flake8

Во flake8.txt обнаружено более 150 предупреждений и ошибок разных типов:

F401 “imported but unused” — множество неиспользуемых импортов в __init__.py и в сервисах.

F403 “from … import *” — запрещённые wildcard-импорты

E501 “line too long” — строки длиннее 79 символов во многих CRUD- и router-модулях

W291/W293 — trailing whitespace и blank line contains whitespace

По требованию проекта lint = 0 warnings, поэтому текущее состояние не удовлетворяет оговорённому порогу.

Причины несоответствия

Дублирование wildcard-импортов: модули core/*/__init__.py, util/__init__.py, routers/__init__.py импортируют “*”, но сами ничего не используют.

Длинные строки кода в основном в файлах CRUD и маршрутизации (часто > 90 символов).

Остаточные пробелы и пустые строки со пробелами — легко устраняемые артефакты.

Рекомендации по исправлению

Удалить неиспользуемые импорты или перенести их в нужные места:

diff
Копировать
Редактировать
- from .database import session_local, Base, engine
Избегать wildcard-импортов: в __init__.py явно перечислить нужные сущности или убрать импорт вовсе.

Привести длину строк к ≤ 79 символам (PEP8) либо согласовать в конфиге Flake8 более высокий максимум (например 100–120).

Убрать trailing whitespace и пустые строки с пробелами (можно автоматизировать через pre-commit-hook trim_whitespace).

Унифицировать конфигурацию линтеров: либо довести Ruff-конфиг до полного покрытия правил Flake8, либо оставить только Flake8 с нужными плагинами и убрать Ruff, чтобы не было расхождений.

Что зафиксировать в отчёте

Общее количество flake8-ошибок и их типы (F401, F403, E501, W291, W293).

Статус Ruff (0 ошибок) — объяснить, что конфигурации различаются.

Конкретные рекомендации (см. выше) с указанием задач для команды (например, «удалить 50 неиспользуемых импортов в core/, …»).

--------------------

Сбор метрик Reliability
Инструмент: curl (или Invoke-RestMethod)
Команда: curl.exe -i http://localhost:8000/health
Результат: HTTP/1.1 404 Not Found → health-endpoint не настроен
Требование: 200 OK → ❌ Не достигнуто
Рекомендация: добавить в FastAPI-приложение простой маршрут:
from fastapi import FastAPI

app = FastAPI()

@app.get("/health", status_code=200)
def health():
    return {"status": "ok"}

Отлично — логи на бэкенде есть и хорошо работают, все запросы выводятся на уровень INFO. Давайте кратко зафиксируем Reliability и перейдём дальше.

Reliability — результаты и дальнейшие шаги
Метрика	Требуется	Фактически	Статус	Рекомендация
Health-endpoint	200 OK	404 Not Found	❌	Добавить в FastAPI маршрут /health.
Логирование	INFO/DEBUG записи	Есть: каждая операция логируется на уровне INFO (пример ниже)	✅	При необходимости перейти на DEBUG.
Uptime-мониторинг	≥ 99 % uptime	Ещё не измерено	❌	Запустить скрипт пинга или подключить внешний сервис (UptimeRobot).

Пример зафиксированного лога
INFO:     127.0.0.1:61806 - "GET /api/books HTTP/1.1" 200 OK
INFO:     127.0.0.1:61914 - "POST /api/register/ HTTP/1.1" 409 Conflict
INFO:     127.0.0.1:65034 - "GET /health HTTP/1.1" 404 Not Found


Health-endpoint
Инструмент: PowerShell + Invoke-WebRequest
Результат: 0 % успешных проверок (все 404) → ❌
Рекомендация: добавить в FastAPI простой маршрут /health, возвращающий 200, а затем повторно запустить скрипт для замера реального uptime ≥ 99 %.


----------------

Сбор метрик Performance
Frontend (Lighthouse)
npx @lhci/cli autorun
Performance — Frontend (Lighthouse)
Инструмент: Lighthouse CI (npx @lhci/cli autorun)

Результат запуска:

.lighthouseci/ директория доступна ✅

Конфигурационный файл не найден ⚠️

Chrome не установлен ❌

Healthcheck failed

Вывод:
Автоматический сбор метрик через Lighthouse CI не выполнен из-за отсутствия конфигурации и установленного браузера.

Performance — Backend (API Response Time)
Инструмент и конфигурация:
Locust 2.37.1, 50 виртуальных пользователей (-u 50), скорость спауна 5 пользователей/сек (-r 5), продолжительность 2 минуты (-t 2m), хост http://localhost:8000.

Полученные метрики:

Всего запросов: 737, отказов: 0

Среднее время ответа (avg): 584 ms

95-й перцентиль: 3600 ms

Максимальное время: 18294 ms

Требование:
“Back-end server should have an average response time of no more than 2000 milliseconds under typical network speeds (50 Mb/s)” 

Вывод:
Среднее время ответа (584 ms) укладывается в порог, но 95-й перцентиль (3600 ms) значительно превышает допустимые 2000 ms → не достигнуто.

Рекомендации:

Профилировать медленные эндпоинты (например, с помощью APM или встроенного профайлера Python).

Оптимизировать критичные SQL-запросы и добавить/проверить индексы в SQLite.

Внедрить кеширование повторяющихся запросов (e.g. Redis) для снижения нагрузки.

При необходимости разделить тяжёлые операции на фоновые задачи (Celery, RQ) и возвращать клиенту быстрый ответ.

---------------

Сбор метрик Security
Bandit
bandit -r backend -f html -o analysis/bandit.html

Security — Bandit Vulnerability Scan
Инструмент и команда:
Bandit CLI v1.8.3, запуск по директории бэкенда:

bandit -r backend -f html -o analysis/bandit.html
``` :contentReference[oaicite:0]{index=0}:contentReference[oaicite:1]{index=1}

Полученные метрики:

Всего строк кода (LOC): 155 719

Строк пропуска (#nosec): 0

Обнаружено 0 medium и 0 low (встроенные файлы pip) — но 2 HIGH-severity и 1 MEDIUM-severity реальные уязвимости:

HIGH (B602): subprocess.check_call(..., shell=True) — риск выполнения непроверенного ввода.

HIGH (B411): импорт xmlrpc.client без защиты — уязвимость к XML-атакам.

MEDIUM (B604): потенциальный shell-инъекционный код в CLI-скриптах.

Требование:
“Bandit must report 0 critical or high findings” (Security threshold) 

.

Вывод:
Порог не достигнут: два высоких риска (HIGH) свидетельствуют о критических уязвимостях безопасности.

Рекомендации:

Исправить shell-вызовы: заменить subprocess.check_call(f'{editor} "{fname}"', shell=True) на передачу аргументов как списка ([editor, fname]) без shell=True.

Защитить XML-парсинг: подключить defusedxml или аналогичный патч для xmlrpc.client (B411).

Пересмотреть CLI-скрипты: устранить использование subprocess с shell=True и внедрить проверки входных данных.

Повторить сканирование после правок, чтобы убедиться в отсутствии high/critical нарушений.

TruffleHog (секреты)
TruffleHog (secrets scan)

Команда:

trufflehog --json --repo_path . . > analysis/secrets.json
Результат: файл analysis/secrets.json размером 35 MB (полный JSON-отчёт сканирования)

Вывод: большое количество найденных потенциальных секретов (см. полный список в JSON-файле)

Рекомендация:

проанализировать отчёт и удалить/ротацию всех обнаруженных секретов из репозитория,

настроить pre-commit hook для автоматического запрета коммитов с ключами.

Docker-scan
docker scout quickview booktrack-backend > analysis/docker_scan.txt

Docker Scout quickview (vulnerability scan образа)

Команда:
docker scout quickview booktrack-backend > analysis/docker_scan.txt
Результат:

level=error msg="failed to pull image booktrack-backend:latest: UNAUTHORIZED: authentication required"
Вывод: образ не опубликован в Docker Hub, поэтому сканирование через docker scout не прошло.


-------------------

Написание отчёта (≤ 5 стр.)
шаблон:

Введение
Цель Task 2, исходные пороги.
Методика
Какие инструменты и команды вы использовали.
Результаты
Сводную таблица, 1–2 ключевых графика/скрина.
Сравнение
Кратко: достигнуто / не достигнуто.
Рекомендации


